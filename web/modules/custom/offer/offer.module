<?php

/**
 * @file
 * Provides an offer entity type.
 */

use Drupal\offer\Entity\Offer;
use Drupal\user\UserInterface;
use Drupal\Core\Render\Element;
use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function offer_theme()
{
  return [
    'offer' => [
      'render element' => 'elements',
    ],
    'offer__full' => [
      'base hook' => 'offer',
    ],
    'offer__teaser' => [
      'base hook' => 'offer'
    ]
  ];
}

/**
 * Prepares variables for offer templates.
 *
 * Default template: offer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the offer information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_offer(array &$variables)
{
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $offer = $variables['elements']['#offer'];

  $temp = $offer->getPromoText();
  // The full offer object
  $variables['offer'] = $offer;
}

/**
 * Implements hook_user_cancel().
 */
function offer_user_cancel($edit, UserInterface $account, $method)
{
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish offers.
      $storage = \Drupal::entityTypeManager()->getStorage('offer');
      $offer_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->execute();
      foreach ($storage->loadMultiple($offer_ids) as $offer) {
        $offer->set('status', FALSE);
        $offer->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize offers.
      $storage = \Drupal::entityTypeManager()->getStorage('offer');
      $offer_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->execute();
      foreach ($storage->loadMultiple($offer_ids) as $offer) {
        $offer->setOwnerId(0);
        $offer->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function offer_user_predelete(UserInterface $account)
{
  // Delete offers.
  $storage = \Drupal::entityTypeManager()->getStorage('offer');
  $offer_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $offers = $storage->loadMultiple($offer_ids);
  $storage->delete($offers);
  // Delete old revisions.
  $offer_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->execute();
  foreach (array_keys($offer_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}

/**
 * Adds template possibility for view modes
 * Implements hook_provider_theme_suggestions_hook_alter
 */
function offer_theme_suggestions_offer_alter(array &$suggestions, array $vars, $hook)
{
  if ($offer = $vars['elements']['#offer']) {
    if (isset($vars['elements']['#view_mode'])) {
      $suggestions[] = 'offer__' . $vars['elements']['#view_mode'];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function offer_views_pre_render(ViewExecutable $view)
{
  if (isset($view) && ($view->storage->id() == 'offer_overview')) {
    $view->element['#attached']['library'][] =
      'offer/offer_overview_page';
  }
}

/**
 * Implements hook_form_alter().
 */
function offer_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  $forms = [
    'offer_step_1_form', 'offer_step_2_form',
    'offer_step_3_form', 'offer_edit_form'
  ];
  if (in_array($form_id, $forms)) {
    // Prevent revision log box access
    $form['revision_log']['#access'] = FALSE;
  }
}
